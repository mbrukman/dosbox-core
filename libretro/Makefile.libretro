DEBUG := 0
GIT_VERSION := " $(shell git rev-parse --short HEAD)"
SVN_VERSION := " $(shell cat svn)"

UNAME=$(shell uname -s)
UNAMEM=$(shell uname -m)

CXXFLAGS += -std=c++17 -Dregister=

# Target triplet for cross compilation. When cross compiling from Linux to
# Windows 32-bit using MXE for example, you'd set this to something like:
#
#     $ make TARGET_TRIPLET=i686-w64-mingw32.static [...]
#
# Or whatever your wanted target is.
ifdef TARGET_TRIPLET
	cross_prefix = $(TARGET_TRIPLET)-
endif
AR:=$(cross_prefix)$(AR)
AS:=$(cross_prefix)$(AS)
CC:=$(cross_prefix)$(CC)
CXX:=$(cross_prefix)$(CXX)
LD:=$(cross_prefix)$(LD)
CMAKE=$(cross_prefix)cmake
PKGCONFIG=$(cross_prefix)pkg-config

platform ?= unix
ifneq ($(findstring MINGW,$(UNAME)),)
	platform = win
else ifneq ($(findstring Darwin,$(UNAME)),)
	platform = osx
else ifneq ($(findstring win,$(UNAME)),)
	platform = win
endif

LIBRETRO_DIR := libretro
TARGET_NAME  := dosbox_core
WITH_DYNAREC :=

# try to guess the dynarec based on the host system, unreliable
ifeq ($(platform),win)
	ifneq ($(findstring MINGW32,$(UNAME)),)
		WITH_DYNAREC := x86
	else ifneq ($(findstring MINGW64,$(UNAME)),)
		WITH_DYNAREC := x86_64
	endif
else ifeq ($(platform),unix)
	ifeq ($(target), x86)
		WITH_DYNAREC := x86
	else ifeq ($(target),x86_64)
		WITH_DYNAREC := x86_64
	else ifeq ($(target),arm)
		WITH_DYNAREC := arm
	else ifeq ($(target),arm64)
		WITH_DYNAREC := arm64
	endif
else ifeq ($(platform),osx)
	ifeq ($(target), x86)
		WITH_DYNAREC := x86
	else ifeq ($(target),x86_64)
		WITH_DYNAREC := x86_64
	endif
endif

# enable IPX
ifeq ($(platform),win)
	WITH_IPX := 1
else ifeq ($(platform),unix)
	WITH_IPX := 1
else ifeq ($(platform),osx)
	WITH_IPX := 1
endif

# arm
ifeq ($(CORTEX_A7), 1)
	COMMONFLAGS += -marm -mcpu=cortex-a7
	WITH_DYNAREC = arm
	ifeq ($(ARM_NEON), 1)
		COMMONFLAGS += -mfpu=neon-vfpv4
	endif
endif
ifeq ($(ARM_HARDFLOAT), 1)
	COMMONFLAGS += -mfloat-abi=hard
endif

# flags
ifeq ($(platform), osx)
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
	TARGET := $(TARGET_NAME)_libretro.dylib
	LDFLAGS += -dynamiclib -lSDL -lSDL_net
	fpic = -fPIC
	ifeq ($(arch),ppc)
		COMMONFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
	endif
	OSXVER = `sw_vers -productVersion | cut -d. -f 2`
	OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
	fpic += -mmacosx-version-min=10.1
	ifndef ($(UNIVERSAL))
		CFLAGS += $(ARCHFLAGS)
		CXXFLAGS += $(ARCHFLAGS)
		LDFLAGS += $(ARCHFLAGS)
	endif
	COMMONFLAGS += -D__MACOSX__
else ifneq (,$(findstring ios,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_ios.dylib
	COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1 -marm
	fpic = -fPIC
	LDFLAGS += -dynamiclib
	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
	ifeq ($(platform),ios-arm64)
		CC = cc -arch arm64 -isysroot $(IOSSDK)
		CXX = c++ -arch arm64 -isysroot $(IOSSDK)
		WITH_DYNAREC = arm64
	else
		CC = cc -arch armv7 -isysroot $(IOSSDK)
		CXX = c++ -arch armv7 -isysroot $(IOSSDK)
		WITH_DYNAREC = arm
	endif
	COMMONFLAGS += -DIOS
	ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
		CC += -miphoneos-version-min=8.0
		COMMONFLAGS += -miphoneos-version-min=8.0
	else
		CC += -miphoneos-version-min=5.0
		COMMONFLAGS += -miphoneos-version-min=5.0
	endif
else ifeq ($(platform), psp1)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = psp-gcc$(EXE_EXT)
	CXX = psp-g++$(EXE_EXT)
	AR = psp-ar$(EXE_EXT)
	WITH_DYNAREC = mips
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DPSP -G0 -DWITH_FAKE_SDL
	STATIC_LINKING = 1
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = arm
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DVITA -DWORDS_BIGENDIAN
	COMMONFLAGS += -mthumb -mcpu=cortex-a9 -mfloat-abi=hard -ftree-vectorize -ffast-math -fsingle-precision-constant -funroll-loops
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fno-optimize-sibling-calls
	STATIC_LINKING = 1
else ifeq ($(platform), ctr)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITARM)/bin/arm-none-eabi-g++$(EXE_EXT)
	AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = oldarm
	ENDIANNESS_DEFINES :=
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DARM11 -D_3DS -Os -s -I$(CTRULIB)/include/
	COMMONFLAGS += -DHAVE_MKDIR
	COMMONFLAGS += -march=armv6k -mtune=mpcore -mfloat-abi=hard
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fomit-frame-pointer -fstrict-aliasing -ffast-math
	COMMONFLAGS += -DDISABLE_EXCEPTIONS -DWITH_FAKE_SDL -fpermissive
	COMMONFLAGS += -I$(DEVKITPRO)/libctru/include
	STATIC_LINKING = 1
else ifeq ($(platform), ngc)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DWORDS_BIGENDIAN=1 -DWITH_FAKE_SDL
	STATIC_LINKING = 1
else ifeq ($(platform), wii)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DGEKKO -mrvl -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1 -fpermissive
	COMMONFLAGS += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int -DWITH_FAKE_SDL
	STATIC_LINKING = 1
	WITH_DYNAREC =
else ifeq ($(platform), wiiu)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DGEKKO -DWIIU -DHW_RVL -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1 -I./deps/include/
	COMMONFLAGS += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int -DWITH_FAKE_SDL
	STATIC_LINKING = 1
	WITH_DYNAREC =
else ifeq ($(platform), libnx)
	include $(DEVKITPRO)/libnx/switch_rules
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CFLAGS += -g -O2 -fPIE -I$(LIBNX)/include/ -ffunction-sections -fdata-sections -ftls-model=local-exec -Wl,--allow-multiple-definition -specs=$(LIBNX)/switch.specs
	CFLAGS += $(INCLUDE) -D__SWITCH__ -DHAVE_LIBNX
	CXXFLAGS += $(ASFLAGS) $(CFLAGS) -std=gnu++11
	WITH_DYNAREC = arm64
	STATIC_LINKING = 1
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DWITH_FAKE_SDL
else ifeq ($(platform), emscripten)
	TARGET := $(TARGET_NAME)_libretro_$(platform).bc
	STATIC_LINKING = 1
	LDFLAGS += -Wl,-Bstatic
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DEMSCRIPTEN -DWITH_FAKE_SDL
else ifeq ($(platform), ps3)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -mhard-float -D__POWERPC__ -D__ppc__ -DWORDS_BIGENDIAN=1 -DWITH_FAKE_SDL
	STATIC_LINKING = 1
	CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
	CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
	AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
else ifeq ($(platform), xbox1_msvc2003)
	CFLAGS += -D__WIN32__
	CXXFLAGS += -D__WIN32__
	TARGET := $(TARGET_NAME)_libretro_xdk1.lib
	MSVCBINDIRPREFIX = $(XDK)/xbox/bin/vc71
	CC  = "$(MSVCBINDIRPREFIX)/CL.exe"
	CXX  = "$(MSVCBINDIRPREFIX)/CL.exe"
	LD   = "$(MSVCBINDIRPREFIX)/lib.exe"
	export INCLUDE := $(XDK)/xbox/include
	export LIB := $(XDK)/xbox/lib
	PSS_STYLE :=2
	CFLAGS   += -D_XBOX -D_XBOX1
	CXXFLAGS += -D_XBOX -D_XBOX1
	WITH_FAKE_SDL = 1
	COMMONFLAGS += -DWITH_FAKE_SDL
	STATIC_LINKING=1
	HAS_GCC := 0
else ifeq ($(platform), win)
	COMMONFLAGS += -mno-ms-bitfields
	TARGET := $(TARGET_NAME)_libretro.dll
	LDFLAGS += -shared -static-libgcc -static-libstdc++ -Wl,--version-script=link.T -lwinmm
	ifeq ($(WITH_FAKE_SDL), 1)
		COMMONFLAGS += -DWITH_FAKE_SDL
		LDFLAGS += -Wl,-Bstatic
	else
		LDFLAGS += -Wl,-Bstatic `$(cross_prefix)sdl-config --static-libs` -lSDL_net
		LDFLAGS += -Wl,-Bdynamic -liphlpapi -lws2_32
	endif
	COMMONFLAGS += -DWIN32=1 -D__USE_W32_SOCKETS -Werror=return-type
else
	ifeq ($(UNAME),Linux)
		WITH_ALSA_MIDI := 1
		COMMONFLAGS += -DHAVE_ALSA
	endif
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
	TARGET := $(TARGET_NAME)_libretro.so
	LDFLAGS += -shared -Wl,--version-script=link.T
	ifeq ($(WITH_FAKE_SDL), 1)
		COMMONFLAGS += -DWITH_FAKE_SDL
		LDFLAGS += -Wl,-Bstatic
	else
		LDFLAGS += `$(cross_prefix)sdl-config --libs` -lSDL_net
	endif
	COMMONFLAGS += -DUNIX_PORTABLE
	LDFLAGS += -Wl,-Bdynamic
	fpic = -fPIC
endif
ifeq ($(DEBUG), 1)
	COMMONFLAGS += -O0 -g
	CMAKE_BUILD_TYPE = Debug
else
	COMMONFLAGS += -O3 -DNDEBUG -DGIT_VERSION=\"$(GIT_VERSION)\" -DSVN_VERSION=\"$(SVN_VERSION)\"
	CMAKE_BUILD_TYPE = Release
endif

ifneq ($(WITH_FAKE_SDL), 1)
	ifeq ($(WITH_IPX), 1)
		COMMONFLAGS += -DC_IPX
	endif
endif

CORE_DIR	:= ..
INCFLAGS	:=
SOURCES_C   :=
SOURCES_CXX :=

DEPS_BIN_DIR = $(CURDIR)/deps_bin
LIBINSTPATCH_BUILD_DIR = $(DEPS_BIN_DIR)/libinstpatch_build
LIBINSTPATCH = $(DEPS_BIN_DIR)/lib/pkgconfig/libinstpatch-1.0.pc
FLUIDSYNTH_BUILD_DIR = $(DEPS_BIN_DIR)/fluidsynth_build
FLUIDSYNTH = $(DEPS_BIN_DIR)/lib/pkgconfig/fluidsynth.pc
MUNT_BUILD_DIR = $(DEPS_BIN_DIR)/munt_build
MUNT = $(MUNT_BUILD_DIR)/libmt32emu.a
export PKG_CONFIG_PATH := $(DEPS_BIN_DIR)/lib/pkgconfig:$(PKG_CONFIG_PATH)
# When cross compiling with MXE, we need PKG_CONFIG_PATH_<TARGET_TRIPLET> but with all dashes and
# dots converted to underscores.
ifdef TARGET_TRIPLET
	export PKG_CONFIG_PATH_$(subst .,_,$(subst -,_,$(TARGET_TRIPLET))) = $(PKG_CONFIG_PATH)
endif

PKG_CONF_PACKAGES = fluidsynth libinstpatch-1.0
ifeq ($(platform), win)
	PKG_CONF_PACKAGES += dlfcn
endif

include Makefile.common

OBJECTS  = $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o)
COMMONFLAGS += `$(PKGCONFIG) --cflags $(PKG_CONF_PACKAGES)` -I$(MUNT_BUILD_DIR)/include
CXXFLAGS += -D__LIBRETRO__ $(fpic) $(INCFLAGS) $(COMMONFLAGS)
CFLAGS   += -D__LIBRETRO__ $(fpic) $(INCFLAGS) $(COMMONFLAGS)
LDFLAGS  += -lm $(fpic) `$(PKGCONFIG) --libs $(PKG_CONF_PACKAGES)` -L$(MUNT_BUILD_DIR) -lmt32emu

all: $(TARGET)

$(MUNT):
	mkdir -p $(MUNT_BUILD_DIR)
	cd $(MUNT_BUILD_DIR) \
	&& $(CMAKE) \
	    -DCMAKE_CXX_FLAGS="-std=c++17" \
	    -DCMAKE_BUILD_TYPE=$(CMAKE_BUILD_TYPE) \
	    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	    -DCMAKE_INSTALL_PREFIX="$(DEPS_BIN_DIR)" \
	    -DLIB_INSTALL_DIR=lib \
	    -Dlibmt32emu_C_INTERFACE=ON \
	    -Dlibmt32emu_SHARED=OFF \
	    -Dlibmt32emu_WITH_INTERNAL_RESAMPLER=ON \
	    "$(CURDIR)/deps/munt/mt32emu" \
	&& VERBOSE=1 $(CMAKE) --build . --config $(CMAKE_BUILD_TYPE)

# Always a release build because ubsan is forced in debug builds.
$(LIBINSTPATCH):
	mkdir -p "$(LIBINSTPATCH_BUILD_DIR)"
	cd "$(LIBINSTPATCH_BUILD_DIR)" \
	&& $(CMAKE) \
	    -DCMAKE_BUILD_TYPE=Release \
	    -DBUILD_SHARED_LIBS=OFF \
	    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	    -DCMAKE_INSTALL_PREFIX="$(DEPS_BIN_DIR)" \
	    -DLIB_INSTALL_DIR=lib \
	    "$(CURDIR)/deps/libinstpatch" \
	&& VERBOSE=1 $(CMAKE) --build . --config Release --target install

# Always a release build because debug build creates broken .pc file with mingw.
$(FLUIDSYNTH): $(LIBINSTPATCH)
	mkdir -p "$(FLUIDSYNTH_BUILD_DIR)"
	cd "$(FLUIDSYNTH_BUILD_DIR)" \
	&& $(CMAKE) \
	    -DCMAKE_BUILD_TYPE=Release \
	    -DBUILD_SHARED_LIBS=OFF \
	    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
	    -DCMAKE_INSTALL_PREFIX="$(DEPS_BIN_DIR)" \
	    -DLIB_INSTALL_DIR=lib \
	    -DDEFAULT_SOUNDFONT= \
	    -Denable-alsa=OFF \
	    -Denable-aufile=OFF \
	    -Denable-dbus=OFF \
	    -Denable-dsound=OFF \
	    -Denable-ipv6=OFF \
	    -Denable-jack=OFF \
	    -Denable-ladspa=OFF \
	    -Denable-lash=OFF \
	    -Denable-libinstpatch=ON \
	    -Denable-libsndfile=ON \
	    -Denable-midishare=OFF \
	    -Denable-network=OFF \
	    -Denable-oboe=OFF \
	    -Denable-opensles=OFF \
	    -Denable-oss=OFF \
	    -Denable-pkgconfig=ON \
	    -Denable-portaudio=OFF \
	    -Denable-pulseaudio=OFF \
	    -Denable-readline=OFF \
	    -Denable-sdl2=OFF \
	    -Denable-systemd=OFF \
	    -Denable-threads=ON \
	    -Denable-waveout=OFF \
	    -Denable-winmidi=OFF \
	    "$(CURDIR)/deps/fluidsynth" \
	&& VERBOSE=1 $(CMAKE) --build . --config $(CMAKE_BUILD_TYPE) --target install

$(OBJECTS): $(FLUIDSYNTH) $(MUNT)

$(TARGET): $(FLUIDSYNTH) $(MUNT) $(OBJECTS)

ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	$(CXX) -o $@ $(OBJECTS) $(LDFLAGS)
endif

clean:
	rm -f $(OBJECTS) $(TARGET)
	rm -rf "$(DEPS_BIN_DIR)"

.PHONY: all clean
